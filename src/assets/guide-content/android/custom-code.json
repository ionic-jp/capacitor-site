{"title":"Custom Native Android Code","description":"Custom Native Android Code","url":"/docs/android/custom-code","contributors":["mlynch","jcesarmobile","RoderickQiu"],"headings":[{"id":"custom-native-android-code","level":1,"text":"Custom Native Android Code"},{"id":"webview-accessible-native-code","level":2,"text":"WebView Accessible Native Code"},{"id":"java","level":3,"text":"Java"},{"id":"kotlin","level":3,"text":"Kotlin"},{"id":"registering-plugin-code","level":3,"text":"Registering Plugin Code"},{"id":"private-native-code","level":2,"text":"Private Native Code"}],"srcPath":"./docs/guide/android/custom-code.md","content":"\n<h1 id=\"custom-native-android-code\">\n  \n  Custom Native Android Code\n  \n</h1>\n<p class=\"intro\">Many apps will want to add custom Java or Kotlin code to implement native features, without the overhead of building and publishing a proper Capacitor plugin.</p>\n\n<p class=\"intro\">There are two ways to do this depending on whether or not you need to access that code from the WebView:</p>\n\n\n<h2 id=\"webview-accessible-native-code\">\n  <a class=\"heading-link\" href=\"#webview-accessible-native-code\"><ion-icon name=\"link\"></ion-icon>\n  WebView Accessible Native Code\n  </a>\n</h2>\n<p>The easiest way to build custom native code that needs to be accessible in the WebView is to build\na local Capacitor plugin for it. In this case, building the plugin is as simple as building a class\nthat inherits from <code>com.getcapacitor.Plugin</code> and uses the <code>@NativePlugin()</code> and <code>@PluginMethod()</code> annotations.</p>\n<p>Here are examples of custom code in Java and Kotlin: </p>\n\n<h3 id=\"java\">\n  <a class=\"heading-link\" href=\"#java\"><ion-icon name=\"link\"></ion-icon>\n  Java\n  </a>\n</h3>\n<p><code>com/example/myapp/CustomNativePlugin.java</code> in <code>android/app/src/main/java</code>:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>myapp</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>getcapacitor<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NativePlugin</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>getcapacitor<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Plugin</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>getcapacitor<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PluginCall</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>getcapacitor<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PluginMethod</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@NativePlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomNativePlugin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Plugin</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation punctuation\">@PluginMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customCall</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PluginCall</span> call<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> message <span class=\"token operator\">=</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// More code here...</span>\n    call<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@PluginMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">customFunction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PluginCall</span> call<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// More code here...</span>\n    call<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  \n<h3 id=\"kotlin\">\n  <a class=\"heading-link\" href=\"#kotlin\"><ion-icon name=\"link\"></ion-icon>\n  Kotlin\n  </a>\n</h3>\n<p>It is also possible to develop custom code with Kotlin. When adding new Kotlin files in Android Studio, you will be prompted to configure Kotlin in your project if necessary. When doing this, make sure to only configure Kotlin in your app module, not the Capacitor or third-party modules.</p>\n<p><code>com/example/myapp/CustomNativePlugin.kt</code> in <code>android/app/src/main/java</code>:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-kotlin\"><code><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>myapp<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>getcapacitor<span class=\"token punctuation\">.</span>NativePlugin<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>getcapacitor<span class=\"token punctuation\">.</span>Plugin<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>getcapacitor<span class=\"token punctuation\">.</span>PluginCall<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>getcapacitor<span class=\"token punctuation\">.</span>PluginMethod<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation builtin\">@NativePlugin</span>\n<span class=\"token keyword\">class</span> CustomNativePlugin <span class=\"token operator\">:</span> <span class=\"token function\">Plugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token annotation builtin\">@PluginMethod</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">customCall</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">:</span> PluginCall<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> message <span class=\"token operator\">=</span> call<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// More code here...</span>\n    call<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation builtin\">@PluginMethod</span>\n  <span class=\"token keyword\">fun</span> <span class=\"token function\">customFunction</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">:</span> PluginCall<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// More code here...</span>\n    call<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  \n<h3 id=\"registering-plugin-code\">\n  <a class=\"heading-link\" href=\"#registering-plugin-code\"><ion-icon name=\"link\"></ion-icon>\n  Registering Plugin Code\n  </a>\n</h3>\n<p>The final step is to register the plugin in your Activity. Registering a Kotlin plugin class in the Activity is the same as regiâ€ºstering a Java class:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-java\"><code><span class=\"token comment\">// Other imports...</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>myapp<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CustomNativePlugin</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BridgeActivity</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Initializes the Bridge</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Plugin</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Additional plugins you've installed go here</span>\n      <span class=\"token comment\">// Ex: add(TotallyAwesomePlugin.class);</span>\n      <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomNativePlugin</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  <p>Then you can use your functions in your webView code:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-typescript\"><code><span class=\"token comment\">// Other codes...</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Plugins <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@capacitor/core\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> CustomNativePlugin <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> Plugins<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Other codes...</span>\nCustomNativePlugin<span class=\"token punctuation\">.</span><span class=\"token function\">customCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">\"CUSTOM MESSAGE\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nCustomNativePlugin<span class=\"token punctuation\">.</span><span class=\"token function\">customFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Other codes...</span></code></pre>\n  </highlight-code-line>\n  <p>For more usages of plugin APIs, have a look at <a href=\"https://capacitorjs.com/docs/plugins/android\">Capacitor Android Plugin Guide</a>.</p>\n\n<h2 id=\"private-native-code\">\n  <a class=\"heading-link\" href=\"#private-native-code\"><ion-icon name=\"link\"></ion-icon>\n  Private Native Code\n  </a>\n</h2>\n<p>If your code doesn&#39;t need to be accessible from the WebView, then simply add your code anywhere it needs to go. With Capacitor, you have full\ncontrol over your native project. Need to add a new event handler in your Activity? Just update <code>MainActivity</code> and add it. The world is truly your oyster.</p>\n"}